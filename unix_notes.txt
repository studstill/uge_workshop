touch FILENAME - Creates an empty file with the name you give it

mv - This command "moves" a file or directory.  It must be given a file to move and a file or a directory to move to.  You also use this command to rename files from setting the destination file as the new name of your source file.

mkdir - This command, when followed by a new directory name, creates a new directory

rm - When followed by a file name, rm will delete that file.  When followed by a directory, you must also include the flag -r (which recursively deletes all the files within the directory).  ***SPECIAL FISH HACK*** The fish shell AUTOMATICALLY (and invisably) adds -f (which forces the action, without prompting the user for permission).  So, typing 'rm -r DIRECTORYNAME', is the same as typing 'rm -rf DIRECTORYNAME' which will force the deletion of the directory and all of its contained files without asking for permission

ls - This is the "list" command.  It lists the contents of a directory (folder)

ll - This is a command that lists all files and subdirectories within my current working directory in their long format, showing permisions, timestamps and more.

l -l - This is the same ass the ll command in certain shells.  It does not work with fish

cat - "concatenates" output from a file.  It just spits it out and is uneditable

> - This symbol takes the output from a command and sends it as output

history - This takes the history of all the commands that I have written into the command line

history > moving_around.txt - This takes the history of all the commands that I have written into the command line and then outputs it into a new file, which it creates, called moving_around.txt

rm - This is the "Remove" command

cd - This stands for "Change Directory". If typed alone, it returns you to your home directory.  If typed before other directories, it creates a path and changes your current directory to the one you specified

| - The pipe takes output from an arguement infront of it and turns it into output for the arguement behind it

man - This command brings up the manual

history | less - This command would take the history of my terminal commands and then out put them using the command/program "less", which would make my list of commands navigatable; Otherwise, it would just spit out the commands.

history less - If I type this command, it seems to simply search my history of commands for anytime that I used the command less.

q - Pressing q while a secondary progam is running with quit the program and return you to the command line.  In order to kill a program, press ^c or CONTROL+c

history | more - Does the same thing as less, but uses the original unix command, more

man history - This brings up the manual on what is, and how to use the history command

clear - clears all commands in the terminal and moves the cursor to the top of the screen.  Using clear does not delete your previous commands, it simply creates blank space and moves the cursor to the top of the screen

subl - This command opens Sublime Text.  This is a command that we added by downloading extra commands into our terminal (I don't really remember how I did it)

Google\ Drive/ - This is showing an example of how to type a file or directory name that has a space in it.  To show the space, you must use a backslash immediately before the space to "escape" <---not sure what this means.  Then you continue to type the file or directory name like normal.  If you didn't escape out (or use the backslash) the command would end at the space and assume that the next word is a seperate command.

cd .. - This changes directories to the one immediately above it

cd ~ - This changes to your home directory.  Typing this is arbitrary as simply typing cd will take you to your home directory by default

cd . - This changes your current directory TO your current directory, effectively moving you to where you already are

pwd - This stands for Print Working Directory.  This printes to the screen (shows you) what directory you are currently in.  Often said to mean "present working directory" although the specific command stands for "print working directory"

git - This is always followed by another command which essentially says "Use Git and do xyz." If you type git by itself, it will show you all the options that are available

git --version - This displays which version of git you are running

uname - This shows you the UNIX operating system name.  In the case of macOS it is Darwin

which - This will locate a program file in the user's path

which uname - This will show you where the file uname is stored

echo - This command displays a line of text

echo $PATH - This displays the default paths for storing and retrieving data from the terminal.  The order of the locations are listed and seperated by spaces.

echo hello world - This simply displays the text "hello world".

help - This is a command that, when running the fish shell, will open a browser and display the help information for using the fish shell.

brew update - This command updates homebrew.

What is homebrew anyway? Well, in the UNIX world, applications are usually installed by something we call a package manager. There are lots of different ones out there, and homebrew is just another one of them.

A package manager is many things, but mostly it: Acts as a catalogue of all available applications that you can install. Keeps track of the applications you have installed in the past, so that it can: Help you update them when necessary remove them and all of their dependent libraries and other files when you want to uninstall

echo $EDITOR - This command shows which editor has been set as the default.  In my case it is Sublime Text

supl - Because I have told my terminal that subl is a command that will open my default editor (Sublime Text), it will open Sublime.  If I type a file name after subl, it will open that file with Sublime.  ** HELPFUL HINT ** If I type the name of a directory after the command subl, it will open all of the files in the directory in Sublime at the same time.  This is HUGELY powerful when working on websites or other projects where it would be adventagiuos to have access to multiple related files at the same time

git config --global user.email 'standstill64@gmail.com' - This command sets the git configurations so that every file that is managed by git on my system will be "signed" with my email address

git config --global user.name 'Jason Studstill' - This command sets the git configurations so that every file that is managed by git on my system will be "signed" with my name

brew install git - This command initializes homebrew to install git

ln -  This command links two files or directories.  Reference the manual (man ln) for more details

unlink - This command unlinks two files or directories.  Reference the manual (man unlink) for more details

subl does_not_exist.txt - This command uses Sublime to open does_not_exist.txt

nano moving_around.txt - nano is a text editor embedded inside the terminal, which, in this case will open moving_around.txt

cat moving_around.txt | sort | less - This chain of commands will concatenate the file moving_around.txt, it will then sort every line item numerically and alphabetically by its first character, and then it will be navigatable by using the up and down arrows to scroll

cat moving_around.txt | sort - This chain of commands will concatenate the file moving_around.txt, it will then sort every line item numerically and alphabetically by its first character

